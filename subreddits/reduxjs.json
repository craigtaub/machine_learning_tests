{"kind": "Listing", "data": {"after": "t3_7odhqa", "dist": 25, "modhash": "5tpi4ybdzubcbc305677b0105d7ea41baaec884faa1daf5d31", "whitelist_status": null, "children": [{"kind": "t3", "data": {"subreddit_id": "t5_39l3a", "approved_at_utc": null, "send_replies": true, "mod_reason_by": null, "banned_by": null, "num_reports": null, "removal_reason": null, "subreddit": "reduxjs", "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Hi,&lt;/p&gt;\n\n&lt;p&gt;I am making a browser app that relies on PouchDB. I use the attachment to store images for every item, each attachment having two images (of different sizes, but same content). I&amp;#39;d like to store my objects urls in my state so it can still be the single source of truth, but then how can I revoke my URLs? There might be several components, sometimes same component but different location that can need this image so how can I know whether it is still being used.&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "selftext": "Hi,\n\nI am making a browser app that relies on PouchDB. I use the attachment to store images for every item, each attachment having two images (of different sizes, but same content). I'd like to store my objects urls in my state so it can still be the single source of truth, but then how can I revoke my URLs? There might be several components, sometimes same component but different location that can need this image so how can I know whether it is still being used.", "likes": null, "suggested_sort": null, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "saved": false, "id": "8798ny", "banned_at_utc": null, "mod_reason_title": null, "view_count": null, "archived": false, "clicked": false, "no_follow": true, "author": "vinz243", "num_crossposts": 0, "link_flair_text": null, "mod_reports": [], "can_mod_post": false, "is_crosspostable": true, "pinned": false, "score": 1, "approved_by": null, "over_18": false, "report_reasons": null, "domain": "self.reduxjs", "hidden": false, "thumbnail": "", "edited": false, "link_flair_css_class": null, "author_flair_css_class": null, "contest_mode": false, "gilded": 0, "downs": 0, "brand_safe": false, "secure_media_embed": {}, "media_embed": {}, "author_flair_text": null, "stickied": false, "visited": false, "can_gild": true, "is_self": true, "parent_whitelist_status": null, "name": "t3_8798ny", "spoiler": false, "permalink": "/r/reduxjs/comments/8798ny/memory_management_and_cleaning/", "subreddit_type": "public", "locked": false, "hide_score": false, "created": 1522101103.0, "url": "https://www.reddit.com/r/reduxjs/comments/8798ny/memory_management_and_cleaning/", "whitelist_status": null, "quarantine": false, "subreddit_subscribers": 1594, "created_utc": 1522072303.0, "subreddit_name_prefixed": "r/reduxjs", "ups": 1, "media": null, "num_comments": 0, "title": "Memory management and cleaning", "mod_note": null, "is_video": false, "distinguished": null}}, {"kind": "t3", "data": {"subreddit_id": "t5_39l3a", "approved_at_utc": null, "send_replies": true, "mod_reason_by": null, "banned_by": null, "num_reports": null, "removal_reason": null, "subreddit": "reduxjs", "selftext_html": null, "selftext": "", "likes": null, "suggested_sort": null, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "saved": false, "id": "86dd4p", "banned_at_utc": null, "mod_reason_title": null, "view_count": null, "archived": false, "clicked": false, "no_follow": true, "author": "changing-name", "num_crossposts": 0, "link_flair_text": null, "mod_reports": [], "can_mod_post": false, "is_crosspostable": true, "pinned": false, "score": 3, "approved_by": null, "over_18": false, "report_reasons": null, "domain": "btl.co", "hidden": false, "thumbnail": "", "edited": false, "link_flair_css_class": null, "author_flair_css_class": null, "contest_mode": false, "gilded": 0, "downs": 0, "brand_safe": false, "secure_media_embed": {}, "media_embed": {}, "author_flair_text": null, "stickied": false, "visited": false, "can_gild": true, "is_self": false, "parent_whitelist_status": null, "name": "t3_86dd4p", "spoiler": false, "permalink": "/r/reduxjs/comments/86dd4p/reducers_smart_contracts_the_redux_blockchain/", "subreddit_type": "public", "locked": false, "hide_score": false, "created": 1521768759.0, "url": "http://btl.co/opinion/a-redux-blockchain.html", "whitelist_status": null, "quarantine": false, "subreddit_subscribers": 1594, "created_utc": 1521739959.0, "subreddit_name_prefixed": "r/reduxjs", "ups": 3, "media": null, "num_comments": 0, "title": "Reducers = Smart Contracts: the Redux Blockchain Interbit", "mod_note": null, "is_video": false, "distinguished": null}}, {"kind": "t3", "data": {"subreddit_id": "t5_39l3a", "approved_at_utc": null, "send_replies": true, "mod_reason_by": null, "banned_by": null, "num_reports": null, "removal_reason": null, "subreddit": "reduxjs", "selftext_html": null, "selftext": "", "likes": null, "suggested_sort": null, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "saved": false, "id": "85l35d", "banned_at_utc": null, "mod_reason_title": null, "view_count": null, "archived": false, "clicked": false, "no_follow": false, "author": "viniciusdacal", "num_crossposts": 0, "link_flair_text": null, "mod_reports": [], "can_mod_post": false, "is_crosspostable": true, "pinned": false, "score": 6, "approved_by": null, "over_18": false, "report_reasons": null, "domain": "hackernoon.com", "hidden": false, "thumbnail": "", "edited": false, "link_flair_css_class": null, "author_flair_css_class": null, "contest_mode": false, "gilded": 0, "downs": 0, "brand_safe": false, "secure_media_embed": {}, "media_embed": {}, "author_flair_text": null, "stickied": false, "visited": false, "can_gild": true, "is_self": false, "parent_whitelist_status": null, "name": "t3_85l35d", "spoiler": false, "permalink": "/r/reduxjs/comments/85l35d/reducing_boilerplate_in_redux_apps_with_arc/", "subreddit_type": "public", "locked": false, "hide_score": false, "created": 1521507902.0, "url": "https://hackernoon.com/reducing-boilerplate-in-redux-apps-with-arc-d9550434470e", "whitelist_status": null, "quarantine": false, "subreddit_subscribers": 1594, "created_utc": 1521479102.0, "subreddit_name_prefixed": "r/reduxjs", "ups": 6, "media": null, "num_comments": 0, "title": "Reducing boilerplate in Redux Apps with Arc", "mod_note": null, "is_video": false, "distinguished": null}}, {"kind": "t3", "data": {"subreddit_id": "t5_39l3a", "approved_at_utc": null, "send_replies": true, "mod_reason_by": null, "banned_by": null, "num_reports": null, "removal_reason": null, "subreddit": "reduxjs", "selftext_html": null, "selftext": "", "likes": null, "suggested_sort": null, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "saved": false, "id": "85o36p", "banned_at_utc": null, "mod_reason_title": null, "view_count": null, "archived": false, "clicked": false, "no_follow": true, "author": "march08", "num_crossposts": 0, "link_flair_text": null, "mod_reports": [], "can_mod_post": false, "is_crosspostable": true, "pinned": false, "score": 1, "approved_by": null, "over_18": false, "report_reasons": null, "domain": "github.com", "hidden": false, "thumbnail": "", "edited": false, "link_flair_css_class": null, "author_flair_css_class": null, "contest_mode": false, "gilded": 0, "downs": 0, "brand_safe": false, "secure_media_embed": {}, "media_embed": {}, "author_flair_text": null, "stickied": false, "visited": false, "can_gild": true, "is_self": false, "parent_whitelist_status": null, "name": "t3_85o36p", "spoiler": false, "permalink": "/r/reduxjs/comments/85o36p/my_first_lib_redux_thunkinject_with_enhanced_deps/", "subreddit_type": "public", "locked": false, "hide_score": false, "created": 1521530539.0, "url": "https://github.com/march08/redux-thunker", "whitelist_status": null, "quarantine": false, "subreddit_subscribers": 1594, "created_utc": 1521501739.0, "subreddit_name_prefixed": "r/reduxjs", "ups": 1, "media": null, "num_comments": 0, "title": "My first lib - redux thunk/inject with enhanced deps that has access to getState and dispatch.", "mod_note": null, "is_video": false, "distinguished": null}}, {"kind": "t3", "data": {"subreddit_id": "t5_39l3a", "approved_at_utc": null, "send_replies": true, "mod_reason_by": null, "banned_by": null, "num_reports": null, "removal_reason": null, "subreddit": "reduxjs", "selftext_html": null, "selftext": "", "likes": null, "suggested_sort": null, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "saved": false, "id": "855a2u", "banned_at_utc": null, "mod_reason_title": null, "view_count": null, "archived": false, "clicked": false, "no_follow": true, "author": "CryptoNotifierDev", "num_crossposts": 0, "link_flair_text": null, "mod_reports": [], "can_mod_post": false, "is_crosspostable": true, "pinned": false, "score": 2, "approved_by": null, "over_18": false, "report_reasons": null, "domain": "ranjithnair.github.io", "hidden": false, "thumbnail": "", "edited": false, "link_flair_css_class": null, "author_flair_css_class": null, "contest_mode": false, "gilded": 0, "downs": 0, "brand_safe": false, "secure_media_embed": {}, "media_embed": {}, "author_flair_text": null, "stickied": false, "visited": false, "can_gild": true, "is_self": false, "parent_whitelist_status": null, "name": "t3_855a2u", "spoiler": false, "permalink": "/r/reduxjs/comments/855a2u/configuring_redux_in_a_universal_react_app_with/", "subreddit_type": "public", "locked": false, "hide_score": false, "created": 1521337005.0, "url": "https://ranjithnair.github.io/2018/03/12/Universal-Redux.html", "whitelist_status": null, "quarantine": false, "subreddit_subscribers": 1594, "created_utc": 1521308205.0, "subreddit_name_prefixed": "r/reduxjs", "ups": 2, "media": null, "num_comments": 0, "title": "Configuring Redux in a Universal React App with React Router", "mod_note": null, "is_video": false, "distinguished": null}}, {"kind": "t3", "data": {"subreddit_id": "t5_39l3a", "approved_at_utc": null, "send_replies": true, "mod_reason_by": null, "banned_by": null, "num_reports": null, "removal_reason": null, "subreddit": "reduxjs", "selftext_html": null, "selftext": "", "likes": null, "suggested_sort": null, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "saved": false, "id": "84fedz", "banned_at_utc": null, "mod_reason_title": null, "view_count": null, "archived": false, "clicked": false, "no_follow": true, "author": "babyfase", "num_crossposts": 0, "link_flair_text": null, "mod_reports": [], "can_mod_post": false, "is_crosspostable": true, "pinned": false, "score": 1, "approved_by": null, "over_18": false, "report_reasons": null, "domain": "hackernoon.com", "hidden": false, "thumbnail": "", "edited": false, "link_flair_css_class": null, "author_flair_css_class": null, "contest_mode": false, "gilded": 0, "downs": 0, "brand_safe": false, "secure_media_embed": {}, "media_embed": {}, "author_flair_text": null, "stickied": false, "visited": false, "can_gild": true, "is_self": false, "parent_whitelist_status": null, "name": "t3_84fedz", "spoiler": false, "permalink": "/r/reduxjs/comments/84fedz/create_entire_reactjs_and_redux_applications_from/", "subreddit_type": "public", "locked": false, "hide_score": false, "created": 1521078735.0, "url": "https://hackernoon.com/build-entire-reactjs-and-redux-applications-from-scratch-8229ad8db0a", "whitelist_status": null, "quarantine": false, "subreddit_subscribers": 1594, "created_utc": 1521049935.0, "subreddit_name_prefixed": "r/reduxjs", "ups": 1, "media": null, "num_comments": 0, "title": "Create Entire ReactJS and Redux Applications from Scratch", "mod_note": null, "is_video": false, "distinguished": null}}, {"kind": "t3", "data": {"subreddit_id": "t5_39l3a", "approved_at_utc": null, "send_replies": true, "mod_reason_by": null, "banned_by": null, "num_reports": null, "removal_reason": null, "subreddit": "reduxjs", "selftext_html": null, "selftext": "", "likes": null, "suggested_sort": null, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "saved": false, "id": "83ryk9", "banned_at_utc": null, "mod_reason_title": null, "view_count": null, "archived": false, "clicked": false, "no_follow": true, "author": "christiangenco", "num_crossposts": 0, "link_flair_text": null, "mod_reports": [], "can_mod_post": false, "is_crosspostable": true, "pinned": false, "score": 3, "approved_by": null, "over_18": false, "report_reasons": null, "domain": "github.com", "hidden": false, "thumbnail": "", "edited": false, "link_flair_css_class": null, "author_flair_css_class": null, "contest_mode": false, "gilded": 0, "downs": 0, "brand_safe": false, "secure_media_embed": {}, "media_embed": {}, "author_flair_text": null, "stickied": false, "visited": false, "can_gild": true, "is_self": false, "parent_whitelist_status": null, "name": "t3_83ryk9", "spoiler": false, "permalink": "/r/reduxjs/comments/83ryk9/introducing_createreduceractions_create_a_reducer/", "subreddit_type": "public", "locked": false, "hide_score": false, "created": 1520853249.0, "url": "https://github.com/christiangenco/createReducerActions", "whitelist_status": null, "quarantine": false, "subreddit_subscribers": 1594, "created_utc": 1520824449.0, "subreddit_name_prefixed": "r/reduxjs", "ups": 3, "media": null, "num_comments": 4, "title": "Introducing createReducerActions - create a reducer and its actions with one function", "mod_note": null, "is_video": false, "distinguished": null}}, {"kind": "t3", "data": {"subreddit_id": "t5_39l3a", "approved_at_utc": null, "send_replies": true, "mod_reason_by": null, "banned_by": null, "num_reports": null, "removal_reason": null, "subreddit": "reduxjs", "selftext_html": null, "selftext": "", "likes": null, "suggested_sort": null, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "saved": false, "id": "826x3w", "banned_at_utc": null, "mod_reason_title": null, "view_count": null, "archived": false, "clicked": false, "no_follow": false, "author": "dasinnere", "num_crossposts": 0, "link_flair_text": null, "mod_reports": [], "can_mod_post": false, "is_crosspostable": true, "pinned": false, "score": 4, "approved_by": null, "over_18": false, "report_reasons": null, "domain": "blog.mayflower.de", "hidden": false, "thumbnail": "", "edited": false, "link_flair_css_class": null, "author_flair_css_class": null, "contest_mode": false, "gilded": 0, "downs": 0, "brand_safe": false, "secure_media_embed": {}, "media_embed": {}, "author_flair_text": null, "stickied": false, "visited": false, "can_gild": true, "is_self": false, "parent_whitelist_status": null, "name": "t3_826x3w", "spoiler": false, "permalink": "/r/reduxjs/comments/826x3w/rip_redux_found_an_article_about_the_future_of/", "subreddit_type": "public", "locked": false, "hide_score": false, "created": 1520294307.0, "url": "https://blog.mayflower.de/6674-react-redux-future.html", "whitelist_status": null, "quarantine": false, "subreddit_subscribers": 1594, "created_utc": 1520265507.0, "subreddit_name_prefixed": "r/reduxjs", "ups": 4, "media": null, "num_comments": 6, "title": "RIP Redux? Found an article about the future of redux in react.", "mod_note": null, "is_video": false, "distinguished": null}}, {"kind": "t3", "data": {"subreddit_id": "t5_39l3a", "approved_at_utc": null, "send_replies": true, "mod_reason_by": null, "banned_by": null, "num_reports": null, "removal_reason": null, "subreddit": "reduxjs", "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Please provide some reasonable thought or come specific use case.&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "selftext": "Please provide some reasonable thought or come specific use case.", "likes": null, "suggested_sort": null, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "saved": false, "id": "7zvot6", "banned_at_utc": null, "mod_reason_title": null, "view_count": null, "archived": false, "clicked": false, "no_follow": true, "author": "zhirzh", "num_crossposts": 0, "link_flair_text": null, "mod_reports": [], "can_mod_post": false, "is_crosspostable": true, "pinned": false, "score": 1, "approved_by": null, "over_18": false, "report_reasons": null, "domain": "self.reduxjs", "hidden": false, "thumbnail": "", "edited": false, "link_flair_css_class": null, "author_flair_css_class": null, "contest_mode": false, "gilded": 0, "downs": 0, "brand_safe": false, "secure_media_embed": {}, "media_embed": {}, "author_flair_text": null, "stickied": false, "visited": false, "can_gild": true, "is_self": true, "parent_whitelist_status": null, "name": "t3_7zvot6", "spoiler": false, "permalink": "/r/reduxjs/comments/7zvot6/opinion_between_reactrouter_params_and_redux/", "subreddit_type": "public", "locked": false, "hide_score": false, "created": 1519494640.0, "url": "https://www.reddit.com/r/reduxjs/comments/7zvot6/opinion_between_reactrouter_params_and_redux/", "whitelist_status": null, "quarantine": false, "subreddit_subscribers": 1594, "created_utc": 1519465840.0, "subreddit_name_prefixed": "r/reduxjs", "ups": 1, "media": null, "num_comments": 0, "title": "[Opinion] Between react-router params and redux state, when to use one over the other?", "mod_note": null, "is_video": false, "distinguished": null}}, {"kind": "t3", "data": {"subreddit_id": "t5_39l3a", "approved_at_utc": null, "send_replies": true, "mod_reason_by": null, "banned_by": null, "num_reports": null, "removal_reason": null, "subreddit": "reduxjs", "selftext_html": null, "selftext": "", "likes": null, "suggested_sort": null, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "saved": false, "id": "7z01jm", "banned_at_utc": null, "mod_reason_title": null, "view_count": null, "archived": false, "clicked": false, "no_follow": true, "author": "Nocticron", "num_crossposts": 0, "link_flair_text": null, "mod_reports": [], "can_mod_post": false, "is_crosspostable": true, "pinned": false, "score": 2, "approved_by": null, "over_18": false, "report_reasons": null, "domain": "github.com", "hidden": false, "thumbnail": "", "edited": false, "link_flair_css_class": null, "author_flair_css_class": null, "contest_mode": false, "gilded": 0, "downs": 0, "brand_safe": false, "secure_media_embed": {}, "media_embed": {}, "author_flair_text": null, "stickied": false, "visited": false, "can_gild": true, "is_self": false, "parent_whitelist_status": null, "name": "t3_7z01jm", "spoiler": false, "permalink": "/r/reduxjs/comments/7z01jm/contentfulredux_a_contentful_sync_api/", "subreddit_type": "public", "locked": false, "hide_score": false, "created": 1519193234.0, "url": "https://github.com/leoschweizer/contentful-redux", "whitelist_status": null, "quarantine": false, "subreddit_subscribers": 1594, "created_utc": 1519164434.0, "subreddit_name_prefixed": "r/reduxjs", "ups": 2, "media": null, "num_comments": 0, "title": "contentful-redux - a Contentful sync API implementation for redux/reselect", "mod_note": null, "is_video": false, "distinguished": null}}, {"kind": "t3", "data": {"subreddit_id": "t5_39l3a", "approved_at_utc": null, "send_replies": true, "mod_reason_by": null, "banned_by": null, "num_reports": null, "removal_reason": null, "subreddit": "reduxjs", "selftext_html": null, "selftext": "", "likes": null, "suggested_sort": null, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "saved": false, "id": "7y90ez", "banned_at_utc": null, "mod_reason_title": null, "view_count": null, "archived": false, "clicked": false, "no_follow": true, "author": "chirpyhead", "num_crossposts": 0, "link_flair_text": null, "mod_reports": [], "can_mod_post": false, "is_crosspostable": true, "pinned": false, "score": 5, "approved_by": null, "over_18": false, "report_reasons": null, "domain": "medium.com", "hidden": false, "thumbnail": "", "edited": false, "link_flair_css_class": null, "author_flair_css_class": null, "contest_mode": false, "gilded": 0, "downs": 0, "brand_safe": false, "secure_media_embed": {}, "media_embed": {}, "author_flair_text": null, "stickied": false, "visited": false, "can_gild": true, "is_self": false, "parent_whitelist_status": null, "name": "t3_7y90ez", "spoiler": false, "permalink": "/r/reduxjs/comments/7y90ez/wrote_an_article_on_basics_of_redux_saga/", "subreddit_type": "public", "locked": false, "hide_score": false, "created": 1518926527.0, "url": "https://medium.com/@aksudupa11/redux-sagas-714370b61692?source=linkShare-6bf8b573c108-1518896827", "whitelist_status": null, "quarantine": false, "subreddit_subscribers": 1594, "created_utc": 1518897727.0, "subreddit_name_prefixed": "r/reduxjs", "ups": 5, "media": null, "num_comments": 0, "title": "Wrote an article on basics of Redux Saga!", "mod_note": null, "is_video": false, "distinguished": null}}, {"kind": "t3", "data": {"subreddit_id": "t5_39l3a", "approved_at_utc": null, "send_replies": true, "mod_reason_by": null, "banned_by": null, "num_reports": null, "removal_reason": null, "subreddit": "reduxjs", "selftext_html": null, "selftext": "", "likes": null, "suggested_sort": null, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "saved": false, "id": "7x3m2a", "banned_at_utc": null, "mod_reason_title": null, "view_count": null, "archived": false, "clicked": false, "no_follow": true, "author": "bambuseqq", "num_crossposts": 0, "link_flair_text": null, "mod_reports": [], "can_mod_post": false, "is_crosspostable": true, "pinned": false, "score": 1, "approved_by": null, "over_18": false, "report_reasons": null, "domain": "github.com", "hidden": false, "thumbnail": "", "edited": false, "link_flair_css_class": null, "author_flair_css_class": null, "contest_mode": false, "gilded": 0, "downs": 0, "brand_safe": false, "secure_media_embed": {}, "media_embed": {}, "author_flair_text": null, "stickied": false, "visited": false, "can_gild": true, "is_self": false, "parent_whitelist_status": null, "name": "t3_7x3m2a", "spoiler": false, "permalink": "/r/reduxjs/comments/7x3m2a/simple_and_natural_nested_property_accessor_for/", "subreddit_type": "public", "locked": false, "hide_score": false, "created": 1518495105.0, "url": "https://github.com/UnderNotic/guardy", "whitelist_status": null, "quarantine": false, "subreddit_subscribers": 1594, "created_utc": 1518466305.0, "subreddit_name_prefixed": "r/reduxjs", "ups": 1, "media": null, "num_comments": 2, "title": "Simple and natural nested property accessor. For node and browser.", "mod_note": null, "is_video": false, "distinguished": null}}, {"kind": "t3", "data": {"subreddit_id": "t5_39l3a", "approved_at_utc": null, "send_replies": false, "mod_reason_by": null, "banned_by": null, "num_reports": null, "removal_reason": null, "subreddit": "reduxjs", "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;With Redux, where and how should I modify user form-submitted input?&lt;/p&gt;\n\n&lt;p&gt;Right now I&amp;#39;m modifying each object in a props array directly upon save, but I imagine this isn&amp;#39;t considered a good practice.&lt;/p&gt;\n\n&lt;p&gt;I don&amp;#39;t think I want &lt;code&gt;componentWillReceiveProps()&lt;/code&gt;, because that fires on each keypress in an input field, and I only want to replace characters in the final input upon save (replacing the contents on each key press resets the field input value and cursor position while the user is still typing, for example).&lt;/p&gt;\n\n&lt;p&gt;So user enters a value in a field, and if necessary I want to replace chars &lt;em&gt;somewhere&lt;/em&gt; in the process. How might I do this the Redux way?&lt;/p&gt;\n\n&lt;p&gt;(I&amp;#39;ve spent a long time searching before posting.)&lt;/p&gt;\n\n&lt;p&gt;Thanks!&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "selftext": "With Redux, where and how should I modify user form-submitted input?\n\nRight now I'm modifying each object in a props array directly upon save, but I imagine this isn't considered a good practice.\n\nI don't think I want `componentWillReceiveProps()`, because that fires on each keypress in an input field, and I only want to replace characters in the final input upon save (replacing the contents on each key press resets the field input value and cursor position while the user is still typing, for example).\n\nSo user enters a value in a field, and if necessary I want to replace chars *somewhere* in the process. How might I do this the Redux way?\n\n(I've spent a long time searching before posting.)\n\nThanks!", "likes": null, "suggested_sort": null, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "saved": false, "id": "7vw6h1", "banned_at_utc": null, "mod_reason_title": null, "view_count": null, "archived": false, "clicked": false, "no_follow": true, "author": "phoger", "num_crossposts": 0, "link_flair_text": null, "mod_reports": [], "can_mod_post": false, "is_crosspostable": true, "pinned": false, "score": 2, "approved_by": null, "over_18": false, "report_reasons": null, "domain": "self.reduxjs", "hidden": false, "thumbnail": "", "edited": false, "link_flair_css_class": null, "author_flair_css_class": null, "contest_mode": false, "gilded": 0, "downs": 0, "brand_safe": false, "secure_media_embed": {}, "media_embed": {}, "author_flair_text": null, "stickied": false, "visited": false, "can_gild": true, "is_self": true, "parent_whitelist_status": null, "name": "t3_7vw6h1", "spoiler": false, "permalink": "/r/reduxjs/comments/7vw6h1/where_should_i_handle_modifying_user_input/", "subreddit_type": "public", "locked": false, "hide_score": false, "created": 1518040024.0, "url": "https://www.reddit.com/r/reduxjs/comments/7vw6h1/where_should_i_handle_modifying_user_input/", "whitelist_status": null, "quarantine": false, "subreddit_subscribers": 1594, "created_utc": 1518011224.0, "subreddit_name_prefixed": "r/reduxjs", "ups": 2, "media": null, "num_comments": 3, "title": "Where should I handle modifying user input?", "mod_note": null, "is_video": false, "distinguished": null}}, {"kind": "t3", "data": {"subreddit_id": "t5_39l3a", "approved_at_utc": null, "send_replies": true, "mod_reason_by": null, "banned_by": null, "num_reports": null, "removal_reason": null, "subreddit": "reduxjs", "selftext_html": null, "selftext": "", "likes": null, "suggested_sort": null, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "saved": false, "id": "7vfe9o", "banned_at_utc": null, "mod_reason_title": null, "view_count": null, "archived": false, "clicked": false, "no_follow": true, "author": "mjaneczek", "num_crossposts": 0, "link_flair_text": null, "mod_reports": [], "can_mod_post": false, "is_crosspostable": true, "pinned": false, "score": 2, "approved_by": null, "over_18": false, "report_reasons": null, "domain": "github.com", "hidden": false, "thumbnail": "", "edited": false, "link_flair_css_class": null, "author_flair_css_class": null, "contest_mode": false, "gilded": 0, "downs": 0, "brand_safe": false, "secure_media_embed": {}, "media_embed": {}, "author_flair_text": null, "stickied": false, "visited": false, "can_gild": true, "is_self": false, "parent_whitelist_status": null, "name": "t3_7vfe9o", "spoiler": false, "permalink": "/r/reduxjs/comments/7vfe9o/conventionalreduxjs_reduce_boilerplate_by/", "subreddit_type": "public", "locked": false, "hide_score": false, "created": 1517872726.0, "url": "https://github.com/mjaneczek/conventional-redux", "whitelist_status": null, "quarantine": false, "subreddit_subscribers": 1594, "created_utc": 1517843926.0, "subreddit_name_prefixed": "r/reduxjs", "ups": 2, "media": null, "num_comments": 1, "title": "Conventional-Redux.js - Reduce Boilerplate By Introducing Convention Over Configuration Pattern", "mod_note": null, "is_video": false, "distinguished": null}}, {"kind": "t3", "data": {"subreddit_id": "t5_39l3a", "approved_at_utc": null, "send_replies": true, "mod_reason_by": null, "banned_by": null, "num_reports": null, "removal_reason": null, "subreddit": "reduxjs", "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Which database would be best for storing redux actions?&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "selftext": "Which database would be best for storing redux actions?", "likes": null, "suggested_sort": null, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "saved": false, "id": "7uawgv", "banned_at_utc": null, "mod_reason_title": null, "view_count": null, "archived": false, "clicked": false, "no_follow": true, "author": "anasanzari", "num_crossposts": 0, "link_flair_text": null, "mod_reports": [], "can_mod_post": false, "is_crosspostable": true, "pinned": false, "score": 0, "approved_by": null, "over_18": false, "report_reasons": null, "domain": "self.reduxjs", "hidden": false, "thumbnail": "", "edited": false, "link_flair_css_class": null, "author_flair_css_class": null, "contest_mode": false, "gilded": 0, "downs": 0, "brand_safe": false, "secure_media_embed": {}, "media_embed": {}, "author_flair_text": null, "stickied": false, "visited": false, "can_gild": true, "is_self": true, "parent_whitelist_status": null, "name": "t3_7uawgv", "spoiler": false, "permalink": "/r/reduxjs/comments/7uawgv/thoughts_on_saving_redux_actions_in_a_database/", "subreddit_type": "public", "locked": false, "hide_score": false, "created": 1517443298.0, "url": "https://www.reddit.com/r/reduxjs/comments/7uawgv/thoughts_on_saving_redux_actions_in_a_database/", "whitelist_status": null, "quarantine": false, "subreddit_subscribers": 1594, "created_utc": 1517414498.0, "subreddit_name_prefixed": "r/reduxjs", "ups": 0, "media": null, "num_comments": 2, "title": "Thoughts on saving Redux actions in a database?", "mod_note": null, "is_video": false, "distinguished": null}}, {"kind": "t3", "data": {"subreddit_id": "t5_39l3a", "approved_at_utc": null, "send_replies": false, "mod_reason_by": null, "banned_by": null, "num_reports": null, "removal_reason": null, "subreddit": "reduxjs", "selftext_html": null, "selftext": "", "likes": null, "suggested_sort": null, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "saved": false, "id": "7tr8cx", "banned_at_utc": null, "mod_reason_title": null, "view_count": null, "archived": false, "clicked": false, "no_follow": true, "author": "xavier-l", "num_crossposts": 0, "link_flair_text": null, "mod_reports": [], "can_mod_post": false, "is_crosspostable": true, "pinned": false, "score": 3, "approved_by": null, "over_18": false, "report_reasons": null, "domain": "github.com", "hidden": false, "thumbnail": "", "edited": false, "link_flair_css_class": null, "author_flair_css_class": null, "contest_mode": false, "gilded": 0, "downs": 0, "brand_safe": false, "secure_media_embed": {}, "media_embed": {}, "author_flair_text": null, "stickied": false, "visited": false, "can_gild": true, "is_self": false, "parent_whitelist_status": null, "name": "t3_7tr8cx", "spoiler": false, "permalink": "/r/reduxjs/comments/7tr8cx/factorize_async_actions_boilerplate_in_redux/", "subreddit_type": "public", "locked": false, "hide_score": false, "created": 1517247597.0, "url": "https://github.com/bamlab/redux-async-actions-factory", "whitelist_status": null, "quarantine": false, "subreddit_subscribers": 1594, "created_utc": 1517218797.0, "subreddit_name_prefixed": "r/reduxjs", "ups": 3, "media": null, "num_comments": 2, "title": "Factorize async actions boilerplate in Redux", "mod_note": null, "is_video": false, "distinguished": null}}, {"kind": "t3", "data": {"subreddit_id": "t5_39l3a", "approved_at_utc": null, "send_replies": true, "mod_reason_by": null, "banned_by": null, "num_reports": null, "removal_reason": null, "subreddit": "reduxjs", "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Is there a best practice on how to handle filter in general? I just thought about that today. After every &amp;#39;filter press&amp;#39; you delete a bit of your data. &lt;/p&gt;\n\n&lt;p&gt;Or do you just flag it so react doesn&amp;#39;t render it? What&amp;#39;s the how-to?&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "selftext": "Is there a best practice on how to handle filter in general? I just thought about that today. After every 'filter press' you delete a bit of your data. \n\nOr do you just flag it so react doesn't render it? What's the how-to?", "likes": null, "suggested_sort": null, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "saved": false, "id": "7sqbqw", "banned_at_utc": null, "mod_reason_title": null, "view_count": null, "archived": false, "clicked": false, "no_follow": true, "author": "Th3Pr0", "num_crossposts": 0, "link_flair_text": null, "mod_reports": [], "can_mod_post": false, "is_crosspostable": true, "pinned": false, "score": 0, "approved_by": null, "over_18": false, "report_reasons": null, "domain": "self.reduxjs", "hidden": false, "thumbnail": "", "edited": false, "link_flair_css_class": null, "author_flair_css_class": null, "contest_mode": false, "gilded": 0, "downs": 0, "brand_safe": false, "secure_media_embed": {}, "media_embed": {}, "author_flair_text": null, "stickied": false, "visited": false, "can_gild": true, "is_self": true, "parent_whitelist_status": null, "name": "t3_7sqbqw", "spoiler": false, "permalink": "/r/reduxjs/comments/7sqbqw/keystrokefiltering_best_practise/", "subreddit_type": "public", "locked": false, "hide_score": false, "created": 1516856321.0, "url": "https://www.reddit.com/r/reduxjs/comments/7sqbqw/keystrokefiltering_best_practise/", "whitelist_status": null, "quarantine": false, "subreddit_subscribers": 1594, "created_utc": 1516827521.0, "subreddit_name_prefixed": "r/reduxjs", "ups": 0, "media": null, "num_comments": 3, "title": "Keystroke-filtering best practise?", "mod_note": null, "is_video": false, "distinguished": null}}, {"kind": "t3", "data": {"subreddit_id": "t5_39l3a", "approved_at_utc": null, "send_replies": true, "mod_reason_by": null, "banned_by": null, "num_reports": null, "removal_reason": null, "subreddit": "reduxjs", "selftext_html": null, "selftext": "", "likes": null, "suggested_sort": null, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "saved": false, "id": "7s8pky", "banned_at_utc": null, "mod_reason_title": null, "view_count": null, "archived": false, "clicked": false, "no_follow": true, "author": "flushentitypacket", "num_crossposts": 0, "link_flair_text": null, "mod_reports": [], "can_mod_post": false, "is_crosspostable": true, "pinned": false, "score": 2, "approved_by": null, "over_18": false, "report_reasons": null, "domain": "medium.com", "hidden": false, "thumbnail": "", "edited": false, "link_flair_css_class": null, "author_flair_css_class": null, "contest_mode": false, "gilded": 0, "downs": 0, "brand_safe": false, "secure_media_embed": {}, "media_embed": {}, "author_flair_text": null, "stickied": false, "visited": false, "can_gild": true, "is_self": false, "parent_whitelist_status": null, "name": "t3_7s8pky", "spoiler": false, "permalink": "/r/reduxjs/comments/7s8pky/typescript_react_redux_tips_that_make_developing/", "subreddit_type": "public", "locked": false, "hide_score": false, "created": 1516681723.0, "url": "https://medium.com/@flushentitypack/typescript-redux-tips-that-make-developing-a-breeze-6202e586910", "whitelist_status": null, "quarantine": false, "subreddit_subscribers": 1594, "created_utc": 1516652923.0, "subreddit_name_prefixed": "r/reduxjs", "ups": 2, "media": null, "num_comments": 1, "title": "Typescript React Redux tips that make developing a breeze", "mod_note": null, "is_video": false, "distinguished": null}}, {"kind": "t3", "data": {"subreddit_id": "t5_39l3a", "approved_at_utc": null, "send_replies": true, "mod_reason_by": null, "banned_by": null, "num_reports": null, "removal_reason": null, "subreddit": "reduxjs", "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Hey all, a couple of things, had a conversation with a friend about thunk and general async middleware. Im assuming for the purposes of this that  you are familiar with thunk. My question is:&lt;/p&gt;\n\n&lt;p&gt;What if instead of using thunk we simply created an action like so&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;asyncAction(){&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;apiCall( (result) =&amp;gt; {&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;var someAction = {&amp;quot;type&amp;quot;:&amp;quot;SOMETHING&amp;quot;,&amp;quot;payload&amp;quot;:result}&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;dispatch(someAction)&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;},1000)&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;}&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;Meaning, instead of dispatching a thunk to the store, dispatch whatever action with whatever payload we need synchronously as normal when the async operation has completed.&lt;/p&gt;\n\n&lt;p&gt;Im clearly missing something here but i dont know what yet&lt;/p&gt;\n\n&lt;p&gt;P.S1: Some people on the reactiflux community say that the problem with this approach is that im not supplying the dispatch function&lt;/p&gt;\n\n&lt;p&gt;P.S2: Sorry for the bad code highlighting, im adding ``` in the beggining and the end but it somehow messes up the newlines and inlines everything, if anyone knows what im doing wrong with it please illuminate&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "selftext": "Hey all, a couple of things, had a conversation with a friend about thunk and general async middleware. Im assuming for the purposes of this that  you are familiar with thunk. My question is:\n\nWhat if instead of using thunk we simply created an action like so\n\n\n`asyncAction(){`\n\n`    apiCall( (result) =&gt; {`\n\n`        var someAction = {\"type\":\"SOMETHING\",\"payload\":result}`\n\n`        dispatch(someAction)`\n\n`    },1000)`\n\n`}`\n\n\nMeaning, instead of dispatching a thunk to the store, dispatch whatever action with whatever payload we need synchronously as normal when the async operation has completed.\n\nIm clearly missing something here but i dont know what yet\n\nP.S1: Some people on the reactiflux community say that the problem with this approach is that im not supplying the dispatch function\n\nP.S2: Sorry for the bad code highlighting, im adding ``` in the beggining and the end but it somehow messes up the newlines and inlines everything, if anyone knows what im doing wrong with it please illuminate", "likes": null, "suggested_sort": null, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "saved": false, "id": "7rhmvt", "banned_at_utc": null, "mod_reason_title": null, "view_count": null, "archived": false, "clicked": false, "no_follow": true, "author": "Malforked", "num_crossposts": 0, "link_flair_text": null, "mod_reports": [], "can_mod_post": false, "is_crosspostable": true, "pinned": false, "score": 3, "approved_by": null, "over_18": false, "report_reasons": null, "domain": "self.reduxjs", "hidden": false, "thumbnail": "", "edited": 1516368739.0, "link_flair_css_class": null, "author_flair_css_class": null, "contest_mode": false, "gilded": 0, "downs": 0, "brand_safe": false, "secure_media_embed": {}, "media_embed": {}, "author_flair_text": null, "stickied": false, "visited": false, "can_gild": true, "is_self": true, "parent_whitelist_status": null, "name": "t3_7rhmvt", "spoiler": false, "permalink": "/r/reduxjs/comments/7rhmvt/understanding_what_thunk_does_wondering_why_its/", "subreddit_type": "public", "locked": false, "hide_score": false, "created": 1516389019.0, "url": "https://www.reddit.com/r/reduxjs/comments/7rhmvt/understanding_what_thunk_does_wondering_why_its/", "whitelist_status": null, "quarantine": false, "subreddit_subscribers": 1594, "created_utc": 1516360219.0, "subreddit_name_prefixed": "r/reduxjs", "ups": 3, "media": null, "num_comments": 7, "title": "Understanding what thunk does, wondering why it's needed", "mod_note": null, "is_video": false, "distinguished": null}}, {"kind": "t3", "data": {"subreddit_id": "t5_39l3a", "approved_at_utc": null, "send_replies": true, "mod_reason_by": null, "banned_by": null, "num_reports": null, "removal_reason": null, "subreddit": "reduxjs", "selftext_html": null, "selftext": "", "likes": null, "suggested_sort": null, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "saved": false, "id": "7rbypk", "banned_at_utc": null, "mod_reason_title": null, "view_count": null, "archived": false, "clicked": false, "no_follow": false, "author": "JoshMock", "num_crossposts": 2, "link_flair_text": null, "mod_reports": [], "can_mod_post": false, "is_crosspostable": true, "pinned": false, "score": 6, "approved_by": null, "over_18": false, "report_reasons": null, "domain": "javascriptfatigue.club", "hidden": false, "thumbnail": "", "edited": false, "link_flair_css_class": null, "author_flair_css_class": null, "contest_mode": false, "gilded": 0, "downs": 0, "brand_safe": false, "secure_media_embed": {}, "media_embed": {}, "author_flair_text": null, "stickied": false, "visited": false, "can_gild": true, "is_self": false, "parent_whitelist_status": null, "name": "t3_7rbypk", "spoiler": false, "permalink": "/r/reduxjs/comments/7rbypk/redux_fundamentals_using_redux_with_react/", "subreddit_type": "public", "locked": false, "hide_score": false, "created": 1516330460.0, "url": "https://www.javascriptfatigue.club/blog/2018/1/18/redux-fundamentals-using-redux-with-react-part-one", "whitelist_status": null, "quarantine": false, "subreddit_subscribers": 1594, "created_utc": 1516301660.0, "subreddit_name_prefixed": "r/reduxjs", "ups": 6, "media": null, "num_comments": 0, "title": "Redux Fundamentals: using Redux with React", "mod_note": null, "is_video": false, "distinguished": null}}, {"kind": "t3", "data": {"subreddit_id": "t5_39l3a", "approved_at_utc": null, "send_replies": true, "mod_reason_by": null, "banned_by": null, "num_reports": null, "removal_reason": null, "subreddit": "reduxjs", "selftext_html": null, "selftext": "", "likes": null, "suggested_sort": null, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "saved": false, "id": "7po2e6", "banned_at_utc": null, "mod_reason_title": null, "view_count": null, "archived": false, "clicked": false, "no_follow": true, "author": "tjsdavies", "num_crossposts": 0, "link_flair_text": null, "mod_reports": [], "can_mod_post": false, "is_crosspostable": true, "pinned": false, "score": 0, "approved_by": null, "over_18": false, "report_reasons": null, "domain": "codesandbox.io", "hidden": false, "thumbnail": "", "edited": false, "link_flair_css_class": null, "author_flair_css_class": null, "contest_mode": false, "gilded": 0, "downs": 0, "brand_safe": false, "secure_media_embed": {}, "media_embed": {}, "author_flair_text": null, "stickied": false, "visited": false, "can_gild": true, "is_self": false, "parent_whitelist_status": null, "name": "t3_7po2e6", "spoiler": false, "permalink": "/r/reduxjs/comments/7po2e6/redux_example_without_the_boilerplate_hyperapp/", "subreddit_type": "public", "locked": false, "hide_score": false, "created": 1515706132.0, "url": "https://codesandbox.io/s/4lw3mvllp9", "whitelist_status": null, "quarantine": false, "subreddit_subscribers": 1594, "created_utc": 1515677332.0, "subreddit_name_prefixed": "r/reduxjs", "ups": 0, "media": null, "num_comments": 4, "title": "redux example without the boilerplate hyperapp style", "mod_note": null, "is_video": false, "distinguished": null}}, {"kind": "t3", "data": {"subreddit_id": "t5_39l3a", "approved_at_utc": null, "send_replies": true, "mod_reason_by": null, "banned_by": null, "num_reports": null, "removal_reason": null, "subreddit": "reduxjs", "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Hello guys,&lt;/p&gt;\n\n&lt;p&gt;Is there an issue with returning a mutated copy of a state in a reducer?&lt;/p&gt;\n\n&lt;p&gt;here&amp;#39;s an example of an app I&amp;#39;m working with:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;let newState = state\nnewState[studentIndex].activities[activityIndex].grade = action.grade\nreturn newState\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;that for me is a lot shorter than the alternative:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;return [\n    ...state.slice(0, studentIndex),\n    {\n        ...state[studentIndex],\n        activities: [\n            ...state[studentIndex].activities.slice(0, activityIndex),\n            {\n                ...state[studentIndex].activities[activityIndex],\n                grade: action.grade\n            },\n            ...state[studentIndex].activities.slice(activityIndex + 1),\n        ]\n    },\n    ...state.slice(studentIndex + 1)\n]\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Thanks!&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "selftext": "Hello guys,\n\nIs there an issue with returning a mutated copy of a state in a reducer?\n\nhere's an example of an app I'm working with:\n\n\n    let newState = state\n    newState[studentIndex].activities[activityIndex].grade = action.grade\n    return newState\n\nthat for me is a lot shorter than the alternative:\n\n    return [\n        ...state.slice(0, studentIndex),\n        {\n            ...state[studentIndex],\n            activities: [\n                ...state[studentIndex].activities.slice(0, activityIndex),\n                {\n                    ...state[studentIndex].activities[activityIndex],\n                    grade: action.grade\n                },\n                ...state[studentIndex].activities.slice(activityIndex + 1),\n            ]\n        },\n        ...state.slice(studentIndex + 1)\n    ]\n\n\nThanks!", "likes": null, "suggested_sort": null, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "saved": false, "id": "7olc2z", "banned_at_utc": null, "mod_reason_title": null, "view_count": null, "archived": false, "clicked": false, "no_follow": true, "author": "_benj", "num_crossposts": 0, "link_flair_text": null, "mod_reports": [], "can_mod_post": false, "is_crosspostable": true, "pinned": false, "score": 1, "approved_by": null, "over_18": false, "report_reasons": null, "domain": "self.reduxjs", "hidden": false, "thumbnail": "", "edited": false, "link_flair_css_class": null, "author_flair_css_class": null, "contest_mode": false, "gilded": 0, "downs": 0, "brand_safe": false, "secure_media_embed": {}, "media_embed": {}, "author_flair_text": null, "stickied": false, "visited": false, "can_gild": true, "is_self": true, "parent_whitelist_status": null, "name": "t3_7olc2z", "spoiler": false, "permalink": "/r/reduxjs/comments/7olc2z/return_a_mutated_copy_of_the_state/", "subreddit_type": "public", "locked": false, "hide_score": false, "created": 1515295919.0, "url": "https://www.reddit.com/r/reduxjs/comments/7olc2z/return_a_mutated_copy_of_the_state/", "whitelist_status": null, "quarantine": false, "subreddit_subscribers": 1594, "created_utc": 1515267119.0, "subreddit_name_prefixed": "r/reduxjs", "ups": 1, "media": null, "num_comments": 8, "title": "return a mutated copy of the state", "mod_note": null, "is_video": false, "distinguished": null}}, {"kind": "t3", "data": {"subreddit_id": "t5_39l3a", "approved_at_utc": null, "send_replies": true, "mod_reason_by": null, "banned_by": null, "num_reports": null, "removal_reason": null, "subreddit": "reduxjs", "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Hi, I&amp;#39;m fairly new to redux and I&amp;#39;m trying to figure out where should I put logic that transforms data from several apis into my domain types. &lt;/p&gt;\n\n&lt;p&gt;For example, let&amp;#39;s say I have the following domain type called &lt;code&gt;Movie&lt;/code&gt; which has the following properties: { title, year, director, release_date, rating, source }.&lt;/p&gt;\n\n&lt;p&gt;Now let&amp;#39;s say I need to fetch movie data from multiple APIs (TheMovieDb, OMDb, etc). I&amp;#39;ll need to take the raw data from each of the sources and map/transform them to my domain type so that the rest of my application knows how to deal with this data in a uniform way.&lt;/p&gt;\n\n&lt;p&gt;Where would put the transform logic for each api? Should this logic live in the saga? The reducer? Or in a custom transform middleware?&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "selftext": "Hi, I'm fairly new to redux and I'm trying to figure out where should I put logic that transforms data from several apis into my domain types. \n\nFor example, let's say I have the following domain type called `Movie` which has the following properties: { title, year, director, release_date, rating, source }.\n\nNow let's say I need to fetch movie data from multiple APIs (TheMovieDb, OMDb, etc). I'll need to take the raw data from each of the sources and map/transform them to my domain type so that the rest of my application knows how to deal with this data in a uniform way.\n\nWhere would put the transform logic for each api? Should this logic live in the saga? The reducer? Or in a custom transform middleware?\n\n ", "likes": null, "suggested_sort": null, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "saved": false, "id": "7ogfst", "banned_at_utc": null, "mod_reason_title": null, "view_count": null, "archived": false, "clicked": false, "no_follow": true, "author": "Humen", "num_crossposts": 0, "link_flair_text": null, "mod_reports": [], "can_mod_post": false, "is_crosspostable": true, "pinned": false, "score": 2, "approved_by": null, "over_18": false, "report_reasons": null, "domain": "self.reduxjs", "hidden": false, "thumbnail": "", "edited": false, "link_flair_css_class": null, "author_flair_css_class": null, "contest_mode": false, "gilded": 0, "downs": 0, "brand_safe": false, "secure_media_embed": {}, "media_embed": {}, "author_flair_text": null, "stickied": false, "visited": false, "can_gild": true, "is_self": true, "parent_whitelist_status": null, "name": "t3_7ogfst", "spoiler": false, "permalink": "/r/reduxjs/comments/7ogfst/question_regarding_data_mapping/", "subreddit_type": "public", "locked": false, "hide_score": false, "created": 1515234973.0, "url": "https://www.reddit.com/r/reduxjs/comments/7ogfst/question_regarding_data_mapping/", "whitelist_status": null, "quarantine": false, "subreddit_subscribers": 1594, "created_utc": 1515206173.0, "subreddit_name_prefixed": "r/reduxjs", "ups": 2, "media": null, "num_comments": 12, "title": "Question regarding data mapping", "mod_note": null, "is_video": false, "distinguished": null}}, {"kind": "t3", "data": {"subreddit_id": "t5_39l3a", "approved_at_utc": null, "send_replies": true, "mod_reason_by": null, "banned_by": null, "num_reports": null, "removal_reason": null, "subreddit": "reduxjs", "selftext_html": null, "selftext": "", "likes": null, "suggested_sort": null, "crosspost_parent_list": [{"subreddit_id": "t5_2seko", "approved_at_utc": null, "send_replies": true, "mod_reason_by": null, "banned_by": null, "num_reports": null, "removal_reason": null, "subreddit": "AskProgramming", "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;&lt;strong&gt;RESOLVED.&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;I incorporated the async/await logic into the reducer that ran right before this one was supposed to. \nIt&amp;#39;s a long promise chain, but it works. &lt;/p&gt;\n\n&lt;p&gt;Background info:&lt;/p&gt;\n\n&lt;p&gt;I&amp;#39;m using the OMDB api to create a web app that has a search bar at the top. This project is mainly to get a better grasp on react-redux, react-router, webpack, and babel. I&amp;#39;m also using bulma on the UI to see what it&amp;#39;s all about. &lt;/p&gt;\n\n&lt;p&gt;When a movie title is entered in:&lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;I send an initial request to get a list of movies with limited information.&lt;/li&gt;\n&lt;li&gt;From that list I extract the imdbIDs from each movie into an array.&lt;/li&gt;\n&lt;li&gt;From that array, I send out sequential api calls to get the full details of each movie, in order.&lt;/li&gt;\n&lt;li&gt;Once the new array of movies arrives, I map over the data and produce a list of cards in the UI.&lt;/li&gt;\n&lt;li&gt;Each card has limited information, but the user can click a button that routes them to full details.&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;p&gt;Now I just have to wire up localstorage (or sessionstorage, idk yet) to cache the data to prevent calling the api too many times.&lt;/p&gt;\n\n&lt;p&gt;Here&amp;#39;s the solution to my problem for anyone in the future:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;export const fetchData = searchTerm =&amp;gt; {\n  const url = `${ROOT_URL}?s=${searchTerm}${API_KEY}`;\n  return dispatch =&amp;gt; {\n    dispatch(fetchStarted());\n    axios\n      .get(url)\n      .then(\n        response =&amp;gt; Object.keys(mapKeys(response.data.Search, &amp;#39;imdbID&amp;#39;)),\n        dispatch(fetchMainData())\n      )\n      .then(async movieIDs =&amp;gt; {\n        let fullDetailArray = [];\n        await asyncForEach(movieIDs, async imdbID =&amp;gt; {\n          const url = `${ROOT_URL}?i=${imdbID}${API_KEY}`;\n          await axios.get(url).then(response =&amp;gt; {\n            fullDetailArray.push(response.data);\n          });\n        });\n        console.log(&amp;#39;DETAIL ARRAY&amp;#39;, fullDetailArray);\n        dispatch(fetchMainDataSuccess(fullDetailArray));\n      });\n  };\n};\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;hr/&gt;\n\n&lt;p&gt;&lt;strong&gt;ORIGINAL POST BELOW&lt;/strong&gt; &lt;/p&gt;\n\n&lt;hr/&gt;\n\n&lt;p&gt;I&amp;#39;m using React/Redux/React-Router/Node&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;//  create an asyncForEach method:\n\nasync function asyncForEach(array, callback) {\n  for (let index = 0; index &amp;lt; array.length; index++) {\n    await callback(array[index], index, array);\n  }\n}\n\n// accepts an array, shoots out 10 sequential calls:\n\nexport const fetchDetailsByIDs = async listIDs =&amp;gt; {\n  let fullDetailArray = [];\n  await asyncForEach(listIDs, async imdbID =&amp;gt; {\n    const url = `${ROOT_URL}?i=${imdbID}${API_KEY}`;\n    await axios.get(url).then(response =&amp;gt; {\n      fullDetailArray.push(response.data);\n    });\n  });\n  console.log(&amp;#39;DETAIL ARRAY&amp;#39;, fullDetailArray);\n\n// console prints:\nDETAIL ARRAY (10) [{\u2026}, {\u2026}, {\u2026}, {\u2026}, {\u2026}, {\u2026}, {\u2026}, {\u2026}, {\u2026}, {\u2026}]\n\n};\n\n// This is my action:\n\nexport const fetchMainDataSuccess = movieList =&amp;gt; {\n  type: FETCH_MAIN_DATA_SUCCESS;\n  payload: movieList;\n};\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;I&amp;#39;m unable to dispatch fullDetailArray, am I hopeless?&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "selftext": "**RESOLVED.**\n\nI incorporated the async/await logic into the reducer that ran right before this one was supposed to. \nIt's a long promise chain, but it works. \n\nBackground info:\n\nI'm using the OMDB api to create a web app that has a search bar at the top. This project is mainly to get a better grasp on react-redux, react-router, webpack, and babel. I'm also using bulma on the UI to see what it's all about. \n\nWhen a movie title is entered in:\n\n1. I send an initial request to get a list of movies with limited information.\n2. From that list I extract the imdbIDs from each movie into an array.\n3. From that array, I send out sequential api calls to get the full details of each movie, in order.\n4. Once the new array of movies arrives, I map over the data and produce a list of cards in the UI.\n5. Each card has limited information, but the user can click a button that routes them to full details.\n\nNow I just have to wire up localstorage (or sessionstorage, idk yet) to cache the data to prevent calling the api too many times.\n\nHere's the solution to my problem for anyone in the future:\n\n    export const fetchData = searchTerm =&gt; {\n      const url = `${ROOT_URL}?s=${searchTerm}${API_KEY}`;\n      return dispatch =&gt; {\n        dispatch(fetchStarted());\n        axios\n          .get(url)\n          .then(\n            response =&gt; Object.keys(mapKeys(response.data.Search, 'imdbID')),\n            dispatch(fetchMainData())\n          )\n          .then(async movieIDs =&gt; {\n            let fullDetailArray = [];\n            await asyncForEach(movieIDs, async imdbID =&gt; {\n              const url = `${ROOT_URL}?i=${imdbID}${API_KEY}`;\n              await axios.get(url).then(response =&gt; {\n                fullDetailArray.push(response.data);\n              });\n            });\n            console.log('DETAIL ARRAY', fullDetailArray);\n            dispatch(fetchMainDataSuccess(fullDetailArray));\n          });\n      };\n    };\n\n\n\n\n\n\n\n\n****\n**ORIGINAL POST BELOW** \n****\n\nI'm using React/Redux/React-Router/Node\n\n\n    //  create an asyncForEach method:\n\n    async function asyncForEach(array, callback) {\n      for (let index = 0; index &lt; array.length; index++) {\n        await callback(array[index], index, array);\n      }\n    }\n    \n    // accepts an array, shoots out 10 sequential calls:\n\n    export const fetchDetailsByIDs = async listIDs =&gt; {\n      let fullDetailArray = [];\n      await asyncForEach(listIDs, async imdbID =&gt; {\n        const url = `${ROOT_URL}?i=${imdbID}${API_KEY}`;\n        await axios.get(url).then(response =&gt; {\n          fullDetailArray.push(response.data);\n        });\n      });\n      console.log('DETAIL ARRAY', fullDetailArray);\n\n    // console prints:\n    DETAIL ARRAY (10) [{\u2026}, {\u2026}, {\u2026}, {\u2026}, {\u2026}, {\u2026}, {\u2026}, {\u2026}, {\u2026}, {\u2026}]\n\n    };\n\n    // This is my action:\n\n    export const fetchMainDataSuccess = movieList =&gt; {\n      type: FETCH_MAIN_DATA_SUCCESS;\n      payload: movieList;\n    };\n\n    \n\nI'm unable to dispatch fullDetailArray, am I hopeless?", "likes": null, "suggested_sort": null, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "saved": false, "id": "7odmb8", "banned_at_utc": null, "mod_reason_title": null, "view_count": null, "archived": false, "clicked": false, "no_follow": true, "author": "GooseNuckle", "num_crossposts": 1, "link_flair_text": "Resolved", "mod_reports": [], "can_mod_post": false, "is_crosspostable": true, "pinned": false, "score": 2, "approved_by": null, "over_18": false, "report_reasons": null, "domain": "self.AskProgramming", "hidden": false, "thumbnail": "", "edited": 1515208125.0, "link_flair_css_class": "", "author_flair_css_class": null, "contest_mode": false, "gilded": 0, "downs": 0, "brand_safe": true, "secure_media_embed": {}, "media_embed": {}, "author_flair_text": null, "stickied": false, "visited": false, "can_gild": true, "is_self": true, "parent_whitelist_status": "all_ads", "name": "t3_7odmb8", "spoiler": false, "permalink": "/r/AskProgramming/comments/7odmb8/im_using_asyncawait_functions_on_an_array_of_ids/", "subreddit_type": "public", "locked": false, "hide_score": false, "created": 1515209504.0, "url": "https://www.reddit.com/r/AskProgramming/comments/7odmb8/im_using_asyncawait_functions_on_an_array_of_ids/", "whitelist_status": "all_ads", "quarantine": false, "subreddit_subscribers": 13753, "created_utc": 1515180704.0, "subreddit_name_prefixed": "r/AskProgramming", "ups": 2, "media": null, "num_comments": 1, "title": "I'm using async/await functions on an array of IDs to send out 10 API calls sequentially, then I want to dispatch that new array of responses to my reducer. I've retrieved my responses in order, but I don't have access to dispatch. Am I hopeless?", "mod_note": null, "is_video": false, "distinguished": null}], "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "saved": false, "id": "7oevqx", "banned_at_utc": null, "mod_reason_title": null, "view_count": null, "archived": false, "clicked": false, "no_follow": true, "author": "GooseNuckle", "num_crossposts": 0, "link_flair_text": null, "mod_reports": [], "can_mod_post": false, "is_crosspostable": true, "pinned": false, "score": 2, "approved_by": null, "over_18": false, "domain": "self.AskProgramming", "hidden": false, "thumbnail": "", "edited": false, "link_flair_css_class": null, "author_flair_css_class": null, "contest_mode": false, "gilded": 0, "downs": 0, "brand_safe": false, "secure_media_embed": {}, "media_embed": {}, "author_flair_text": null, "stickied": false, "visited": false, "can_gild": true, "is_self": false, "name": "t3_7oevqx", "parent_whitelist_status": null, "hide_score": false, "crosspost_parent": "t3_7odmb8", "spoiler": false, "permalink": "/r/reduxjs/comments/7oevqx/im_using_asyncawait_functions_on_an_array_of_ids/", "subreddit_type": "public", "locked": false, "report_reasons": null, "created": 1515220085.0, "url": "https://www.reddit.com/r/AskProgramming/comments/7odmb8/im_using_asyncawait_functions_on_an_array_of_ids/", "whitelist_status": null, "quarantine": false, "subreddit_subscribers": 1594, "created_utc": 1515191285.0, "subreddit_name_prefixed": "r/reduxjs", "ups": 2, "media": null, "num_comments": 1, "title": "I'm using async/await functions on an array of IDs to send out 10 API calls sequentially, then I want to dispatch that new array of responses to my reducer. I've retrieved my responses in order, but I don't have access to dispatch. Am I hopeless?", "mod_note": null, "is_video": false, "distinguished": null}}, {"kind": "t3", "data": {"subreddit_id": "t5_39l3a", "approved_at_utc": null, "send_replies": true, "mod_reason_by": null, "banned_by": null, "num_reports": null, "removal_reason": null, "subreddit": "reduxjs", "selftext_html": null, "selftext": "", "likes": null, "suggested_sort": null, "crosspost_parent_list": [{"subreddit_id": "t5_2qh30", "approved_at_utc": null, "send_replies": true, "mod_reason_by": null, "banned_by": null, "num_reports": null, "removal_reason": null, "subreddit": "javascript", "selftext_html": null, "selftext": "", "likes": null, "suggested_sort": null, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "saved": false, "id": "7oddvf", "banned_at_utc": null, "mod_reason_title": null, "view_count": null, "archived": false, "clicked": false, "no_follow": false, "author": "JoshMock", "num_crossposts": 1, "link_flair_text": null, "mod_reports": [], "can_mod_post": false, "is_crosspostable": true, "pinned": false, "score": 11, "approved_by": null, "over_18": false, "report_reasons": null, "domain": "javascriptfatigue.club", "hidden": false, "thumbnail": "", "edited": false, "link_flair_css_class": null, "author_flair_css_class": null, "contest_mode": false, "gilded": 0, "downs": 0, "brand_safe": true, "secure_media_embed": {}, "media_embed": {}, "author_flair_text": null, "stickied": false, "visited": false, "can_gild": true, "is_self": false, "parent_whitelist_status": "all_ads", "name": "t3_7oddvf", "spoiler": false, "permalink": "/r/javascript/comments/7oddvf/redux_fundamentals_creating_and_using_stores/", "subreddit_type": "public", "locked": false, "hide_score": false, "created": 1515207577.0, "url": "https://www.javascriptfatigue.club/blog/2018/1/5/redux-fundamentals-creating-and-using-stores", "whitelist_status": "all_ads", "quarantine": false, "subreddit_subscribers": 227257, "created_utc": 1515178777.0, "subreddit_name_prefixed": "r/javascript", "ups": 11, "media": null, "num_comments": 0, "title": "Redux Fundamentals: creating and using stores", "mod_note": null, "is_video": false, "distinguished": null}], "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "saved": false, "id": "7odhqa", "banned_at_utc": null, "mod_reason_title": null, "view_count": null, "archived": false, "clicked": false, "no_follow": true, "author": "JoshMock", "num_crossposts": 0, "link_flair_text": null, "mod_reports": [], "can_mod_post": false, "is_crosspostable": true, "pinned": false, "score": 1, "approved_by": null, "over_18": false, "domain": "javascriptfatigue.club", "hidden": false, "thumbnail": "", "edited": false, "link_flair_css_class": null, "author_flair_css_class": null, "contest_mode": false, "gilded": 0, "downs": 0, "brand_safe": false, "secure_media_embed": {}, "media_embed": {}, "author_flair_text": null, "stickied": false, "visited": false, "can_gild": true, "is_self": false, "name": "t3_7odhqa", "parent_whitelist_status": null, "hide_score": false, "crosspost_parent": "t3_7oddvf", "spoiler": false, "permalink": "/r/reduxjs/comments/7odhqa/redux_fundamentals_creating_and_using_stores/", "subreddit_type": "public", "locked": false, "report_reasons": null, "created": 1515208444.0, "url": "https://www.javascriptfatigue.club/blog/2018/1/5/redux-fundamentals-creating-and-using-stores", "whitelist_status": null, "quarantine": false, "subreddit_subscribers": 1594, "created_utc": 1515179644.0, "subreddit_name_prefixed": "r/reduxjs", "ups": 1, "media": null, "num_comments": 0, "title": "Redux Fundamentals: creating and using stores", "mod_note": null, "is_video": false, "distinguished": null}}], "before": null}}